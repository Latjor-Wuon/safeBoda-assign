# Generated by Django 5.0.1 on 2025-10-14 12:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(max_length=15, unique=True, verbose_name='phone number')),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('driver', 'Driver'), ('admin', 'Admin'), ('government', 'Government Official')], default='customer', max_length=20)),
                ('national_id', models.CharField(help_text='Rwanda National ID (16 digits)', max_length=16, unique=True, validators=[django.core.validators.RegexValidator(message='Rwanda National ID must be 16 digits', regex='^\\d{16}$')])),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('middle_name', models.CharField(blank=True, max_length=150, verbose_name='middle name')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('province', models.CharField(blank=True, max_length=100, verbose_name='province')),
                ('district', models.CharField(blank=True, max_length=100, verbose_name='district')),
                ('sector', models.CharField(blank=True, max_length=100, verbose_name='sector')),
                ('cell', models.CharField(blank=True, max_length=100, verbose_name='cell')),
                ('village', models.CharField(blank=True, max_length=100, verbose_name='village')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('language_preference', models.CharField(choices=[('en', 'English'), ('rw', 'Kinyarwanda'), ('fr', 'French')], default='rw', max_length=10)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_phone_verified', models.BooleanField(default=False)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DriverProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Invalid Rwanda driver license format', regex='^[A-Z0-9]{8,20}$')])),
                ('license_expiry_date', models.DateField()),
                ('license_category', models.CharField(max_length=10)),
                ('vehicle_type', models.CharField(choices=[('motorcycle', 'Motorcycle'), ('car', 'Car'), ('bicycle', 'Bicycle')], max_length=20)),
                ('vehicle_plate_number', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Invalid Rwanda vehicle plate number format', regex='^R[A-Z]{2}\\s?\\d{3}[A-Z]$')])),
                ('vehicle_make', models.CharField(max_length=50)),
                ('vehicle_model', models.CharField(max_length=50)),
                ('vehicle_year', models.PositiveIntegerField()),
                ('vehicle_color', models.CharField(max_length=30)),
                ('insurance_number', models.CharField(max_length=50)),
                ('insurance_expiry_date', models.DateField()),
                ('vehicle_inspection_date', models.DateField()),
                ('vehicle_inspection_expiry', models.DateField()),
                ('status', models.CharField(choices=[('pending', 'Pending Verification'), ('approved', 'Approved'), ('suspended', 'Suspended'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_rides', models.PositiveIntegerField(default=0)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_online', models.BooleanField(default=False)),
                ('current_latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('current_longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('last_location_update', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_drivers', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='driver_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Driver Profile',
                'verbose_name_plural': 'Driver Profiles',
                'db_table': 'driver_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('device_info', models.JSONField(blank=True, default=dict)),
                ('location_info', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'db_table': 'user_sessions',
            },
        ),
        migrations.CreateModel(
            name='VerificationCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6)),
                ('verification_type', models.CharField(choices=[('phone', 'Phone Verification'), ('email', 'Email Verification'), ('password_reset', 'Password Reset')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verification_codes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Verification Code',
                'verbose_name_plural': 'Verification Codes',
                'db_table': 'verification_codes',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='auth_user_email_ece7f7_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone_number'], name='auth_user_phone_n_baf3e9_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['national_id'], name='auth_user_nationa_2c8a3b_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='auth_user_role_f90fd2_idx'),
        ),
        migrations.AddIndex(
            model_name='driverprofile',
            index=models.Index(fields=['license_number'], name='driver_prof_license_a4f61d_idx'),
        ),
        migrations.AddIndex(
            model_name='driverprofile',
            index=models.Index(fields=['vehicle_plate_number'], name='driver_prof_vehicle_da75e4_idx'),
        ),
        migrations.AddIndex(
            model_name='driverprofile',
            index=models.Index(fields=['status'], name='driver_prof_status_f9a9db_idx'),
        ),
        migrations.AddIndex(
            model_name='driverprofile',
            index=models.Index(fields=['is_online'], name='driver_prof_is_onli_fbcb3a_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['session_key'], name='user_sessio_session_cc84b9_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', 'is_active'], name='user_sessio_user_id_bb1b83_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationcode',
            index=models.Index(fields=['user', 'verification_type', 'is_used'], name='verificatio_user_id_b4b2e6_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationcode',
            index=models.Index(fields=['code', 'expires_at'], name='verificatio_code_51c15f_idx'),
        ),
    ]
